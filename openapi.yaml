openapi: 3.0.3
info:
  title: KABUTO
  description: |-
    KABUTOにおけるAPIインターフェイスの定義書
    
    関連リンク:
    - [KABUTO](https://github.com/Naoya-Otani/KABUTO)
    - [KABUTO_ER図 (Figjam)](https://www.figma.com/file/V6kOzuj4Wkgsqu0BgpWo7t/ER%E5%9B%B3?type=whiteboard&node-id=0%3A1&t=lWHpXwKHmhefk4R1-1)
  contact:
    email: naoyaotani914@gmail.com
  version: 1.0.0
servers:
  - url: https://localhost:3000/api/
tags:
  - name: user
    description: Operations about user
paths:
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: NaoyaInSingapore
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        about_me:
          type: string
          example: 'Hi, Im Naoya. Im from Singapore!'
        is_student:
          type: boolean
          example: true
        is_paid:
          type: boolean
          example: true
        stripe_customer_id:
          type: string
          example: jsbtmksdnejkslw
        sessions:
          type: object
        industry_of_interest:
         type: object
         example: {
           id: 1,
           name: "投資銀行"
         }
        university:
          type: object
          example: {
            id: 2,
            name: "慶應義塾大学"
          }
        forums:
          type: array
          items:
            type: object
        columns:
          type: array
          items:
            type: object
      xml:
        name: user
    Session:
      type: object
      properties:
        id:
          type: string
          example: "random-cuid"
        session_token:
          type: string
          example: "unique-string"
        user_id:
          type: integer
          format: int64
          example: 10
        expires_at:
          type: string
          format: date
        user:
          type: object
    Account:
      type: object
      properties:
        id:
          type: string
          example: "random-cuid"
        user_id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: "oauth"
        provider:
          type: string
          example: google
        provider_account_id:
          type: string
          example: "random-string"
        refresh_token:
          type: string
          example: "random-string"
        access_token:
          type: string
          example: "random-string"
        expires_at:
          type: string
          format: date
          example: "0000000000"
        token_type:
          type: string
          example: "random-string"
        scope: 
          type: string
          example: "random-string"
        id_token:
          type: string
          example: "random-string"
        session_state:
          type: string
          example: "random-string"
        oauth_token_secret:
          type: string
          example: "random-string"
        oauth_token: 
          type: string
          example: "random-string"
        user: 
          type: object
    Column:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "How to pass a interview"
        body:
          type: string
          example: "<p>Hello, world</p>"
        user_id:
          type: string
          example: "dskkksa"
        posted_at:
          type: string
          format: date-time
          example: "2023-04-01T17:32:28Z"
        categories:
          type: object
        related_columns:
          type: array
          items:
            type: object
    Forum:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        title:
          type: string
          minLength: 1
          maxLength: 300
        description:
          type: string
          minLength: 1
          maxLength: 5000
        posted_at:
          type: string
          format: date-time
          example: "2023-04-01T17:32:28Z"
        thumbs_up_count:
          type: integer
        thumbs_down_count:
          type: integer
        comments:
          type: object
        categories:
          type: object
    Comment:
      type: object
      properties:
        id:
          type: string
        forum_id:
          type: string
        user_id:
          type: string
        user:
          type: object
        username:
          type: string
        posted_at:
          type: string
          format: date-time
          example: "2023-04-01T17:32:28Z"
        thumbs_up_count:
          type: integer
        thumbs_down_count:
          type: integer
        reply_to:
          type: string
          example: "comment.id"
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header